version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:14-alpine
    container_name: aves-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-aves}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - aves-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aves-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001

      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-aves}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@database:5432/${DB_NAME:-aves}

      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      UNSPLASH_ACCESS_KEY: ${UNSPLASH_ACCESS_KEY:-}

      # Security
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}

      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}

      # Feature Flags
      ENABLE_VISION_AI: ${ENABLE_VISION_AI:-true}
      ENABLE_EXERCISE_GENERATION: ${ENABLE_EXERCISE_GENERATION:-true}
      ENABLE_BATCH_PROCESSING: ${ENABLE_BATCH_PROCESSING:-true}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - aves-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
        VITE_API_VERSION: ${VITE_API_VERSION:-v1}
        VITE_ENABLE_UNSPLASH: ${VITE_ENABLE_UNSPLASH:-true}
        VITE_ENABLE_AI_EXERCISES: ${VITE_ENABLE_AI_EXERCISES:-true}
        VITE_ENABLE_VISION_AI: ${VITE_ENABLE_VISION_AI:-true}
        VITE_DEBUG_MODE: ${VITE_DEBUG_MODE:-false}
    container_name: aves-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - aves-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  aves-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
