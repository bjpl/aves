name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Service containers to run with the job
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aves_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Create .env.test file
      run: |
        cd backend
        cat > .env.test << ENVFILE
        # Test Database (GitHub Actions)
        TEST_DB_HOST=localhost
        TEST_DB_PORT=5432
        TEST_DB_NAME=aves_test
        TEST_DB_USER=postgres
        TEST_DB_PASSWORD=postgres
        TEST_SCHEMA=aves_test

        # Main pool (for tests that import services directly)
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=aves_test
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_ALLOW_EXIT_ON_IDLE=true
        DB_SSL_ENABLED=false

        # Security Keys (from GitHub Secrets)
        JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}
        JWT_EXPIRES_IN=24h
        SESSION_SECRET=${{ secrets.TEST_SESSION_SECRET }}

        # Anthropic Claude (from GitHub Secrets)
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_MODEL=claude-sonnet-4-5-20250629
        ANTHROPIC_MAX_TOKENS=4096
        ANTHROPIC_TEMPERATURE=0.7

        # AI Feature Flags
        ENABLE_VISION_AI=true
        VISION_PROVIDER=claude
        ENABLE_IMAGE_ANALYSIS=true
        ENABLE_EXERCISE_GENERATION=true
        ENABLE_IMAGE_GENERATION=true

        # Test Environment
        NODE_ENV=test
        ENVFILE

    - name: Setup test database
      run: |
        cd backend
        # Create test schema
        PGPASSWORD=postgres psql -h localhost -U postgres -d aves_test -c "CREATE SCHEMA IF NOT EXISTS aves_test;"

        # Run migrations
        if [ -f "src/database/migrations/test/001_create_all_test_tables.sql" ]; then
          PGPASSWORD=postgres psql -h localhost -U postgres -d aves_test < src/database/migrations/test/001_create_all_test_tables.sql
        fi

        if [ -f "src/database/migrations/test/010_create_species_and_images.sql" ]; then
          PGPASSWORD=postgres psql -h localhost -U postgres -d aves_test < src/database/migrations/test/010_create_species_and_images.sql
        fi

    - name: Run linting
      run: |
        cd backend
        npm run lint || true  # Don't fail on lint errors for now

    - name: Run type checking
      run: |
        cd backend
        npm run typecheck || true  # Don't fail on type errors for now

    - name: Run tests
      run: |
        cd backend
        npm test -- --coverage --maxWorkers=2 --forceExit
      env:
        CI: true

    - name: Upload coverage reports
      if: matrix.node-version == '20.x'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # Don't fail if codecov is down

    - name: Archive test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          backend/test-output.log
          backend/coverage/
        retention-days: 7
